 `timescale 1ns / 1ps
`define CHANNELDEPTH 16
`define logCHANNELDEPTH 4
module i2s_tx(
    input            mclk,
    input            bclk,
    input            lrclk,
    output reg        sdata = 1'b0,
    input signed [`CHANNELDEPTH-1:0]    left_chan, 
    input signed [`CHANNELDEPTH-1:0]    right_chan
);
reg lrclk_delayed = 1'b1;
reg [`logCHANNELDEPTH-1:0] bit_cnt = `logCHANNELDEPTH'b0;
reg signed [`CHANNELDEPTH-1:0]        left;
reg signed [`CHANNELDEPTH-1:0]        right;
reg bclk_last = 1'b0;
    
always @(posedge mclk) begin
    //i2s requires the signal be delayed by one bclk cycle from the lr switch
    if(bclk_last == 1'b1 && bclk == 1'b0) begin
        if (bit_cnt == `logCHANNELDEPTH'b0) begin
            lrclk_delayed = ~lrclk_delayed;
            //read in channels at beginning of lr cycle
            if(lrclk_delayed) begin
                left = left_chan;
                right = right_chan;
            end
        end
   
       //assign proper chanel to sdata
        sdata = lrclk_delayed ? right[`CHANNELDEPTH-1 - bit_cnt] : left[`CHANNELDEPTH-1 - bit_cnt];
        //increment bit count
        if(bit_cnt == `logCHANNELDEPTH'b01111)
            bit_cnt = `logCHANNELDEPTH'b0;
        else
            bit_cnt = bit_cnt + 1;
    end
    bclk_last = bclk;
end
endmodule

module is2_v(input clk,
	     input signed [`CHANNELDEPTH-1:0]    left_chan, 
             input signed [`CHANNELDEPTH-1:0]    right_chan,
	     output reg data,
	     output reg bit_clk,
	     output reg lr_clk
	     ) {


		
		}